<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AKnowledge</title>
    <link>http://aknowledge.xyz/</link>
    <description>Recent content on AKnowledge</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 May 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://aknowledge.xyz/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Giddyup: First Look at Pony Lang</title>
      <link>http://aknowledge.xyz/blog/pony-impressions/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://aknowledge.xyz/blog/pony-impressions/</guid>
      <description>

&lt;p&gt;A friend of mine jokingly brought up the &lt;a href=&#34;ponylang&#34;&gt;Pony&lt;/a&gt; language in the context that he&amp;rsquo;s resigned himself to learn the language because his manager (also a mutual friend) is a staunch pony-phile (e.g., attended &lt;a href=&#34;http://www.babscon.com/&#34;&gt;BABSCon&lt;/a&gt;, had a Rainbow Dash balloon floating above his desk at a previous job). At first I was intrigued: How many of the core designers are diehard &lt;a href=&#34;http://www.urbandictionary.com/define.php?term=Brony&#34;&gt;bronies&lt;/a&gt;? Is this a legitimate language or just horsing around? As it turns out, this is a &lt;strong&gt;well thought out&lt;/strong&gt; language with central design ideas and, as far as I can tell, is not in any way related to My Little Pony. I&amp;rsquo;m going to take the rest of the post to give my $0.02 based on what I&amp;rsquo;ve read so far (the &lt;a href=&#34;ponytut&#34;&gt;Pony tutorial&lt;/a&gt; followed by a couple of &lt;a href=&#34;post1&#34;&gt;blog&lt;/a&gt; &lt;a href=&#34;post2&#34;&gt;posts&lt;/a&gt; by Bluish Coder/Chris Double) and what I&amp;rsquo;ve tinkered with.&lt;/p&gt;

&lt;h3 id=&#34;overview:1a34a3712212748d48ae30ed3811b4a0&#34;&gt;Overview&lt;/h3&gt;

&lt;p&gt;What do I mean by a &amp;ldquo;well thought out language&amp;rdquo;? &lt;a href=&#34;ponylang&#34;&gt;PonyLang&lt;/a&gt;, from its inception, was designed to emphasize (in order of importance)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;correctness&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;performance&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;simplicity&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;consistency&lt;/li&gt;
&lt;li&gt;completeness&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Almost everything that I&amp;rsquo;ve read so far about Pony has pointed back to these principles (together called the &amp;ldquo;get-stuff-done&amp;rdquo; approach) and used this ordering to determine how to proceed on an issue. How should race conditions be handled? Well, a race condition is a form of &amp;ldquo;incorrectness&amp;rdquo; so eliminating them entirely became part of the plan. Ahead of time compilation? That should help with correctness and performance at the expense portability and scripting capabilities among others (neither of which you&amp;rsquo;ll note are on the list).&lt;/p&gt;

&lt;p&gt;What else can be said about the language? It&amp;rsquo;s object-oriented, &lt;a href=&#34;actor-model-wiki&#34;&gt;actor-model&lt;/a&gt; (of Erlang fame), open-source, compiled, and very young (v0.1.0 relased in April 2015, currently at v0.2.1). There are a few &lt;a href=&#34;papers&#34;&gt;academic papers&lt;/a&gt; written about it, with more coming I&amp;rsquo;d imagine.&lt;/p&gt;


&lt;figure class=&#34;align-center&#34;&gt;
    
        &lt;img src=&#34;http://aknowledge.xyz/img/posts/ponylang_mascot.jpeg&#34; alt=&#34;The brand new (May 13, 2016) mascot. His name is Main.&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        The brand new (May 13, 2016) mascot. His name is Main.
        &lt;a href=&#34;https://twitter.com/SeanTAllen/status/731129619143925760&#34;&gt; 
            @ponylang
        &lt;/a&gt; 
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h3 id=&#34;pony-is-a-natural-stupidity-repellant:1a34a3712212748d48ae30ed3811b4a0&#34;&gt;Pony is a natural stupidity repellant&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll notice I emphasized &amp;ldquo;correctness&amp;rdquo; and &amp;ldquo;simplicity&amp;rdquo;. I did this because of all of these guiding principles, these two are clearly the conceptual parents of another less specified, but wonderfully pervasive, doctrine: &amp;ldquo;save developers from shooting themselves in the foot&amp;rdquo;. I&amp;rsquo;ll call any characteristics born of this concept &amp;ldquo;DevSafe&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;no-null:1a34a3712212748d48ae30ed3811b4a0&#34;&gt;No Null&lt;/h4&gt;

&lt;p&gt;Yeah, they got rid of Tony Hoare&amp;rsquo;s famed &lt;a href=&#34;hoare-quote&#34;&gt;billion dollar mistake&lt;/a&gt; called &amp;ldquo;null&amp;rdquo;. Don&amp;rsquo;t worry, there is still the primitive type &lt;code&gt;None&lt;/code&gt;, but you&amp;rsquo;ll never see it when you&amp;rsquo;re not expecting it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x: String // x will only ever be a String. If there is a part of the code that could potentially assign x to be None, the compiler will spit out an error

var y: (String | None) // y can be a String OR None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DevSafe!&lt;/p&gt;

&lt;h4 id=&#34;no-global-variables:1a34a3712212748d48ae30ed3811b4a0&#34;&gt;No global variables&lt;/h4&gt;

&lt;p&gt;Remember that &lt;a href=&#34;http://www.safetyresearch.net/blog/articles/toyota-unintended-acceleration-and-big-bowl-%E2%80%9Cspaghetti%E2%80%9D-code&#34;&gt;fatal acceleration bug&lt;/a&gt; Toyota had a couple of years ago? Well apparently they had 10,000 global variables meaning potentially 10,000 different ways for any part of the code to manipulate the rest of the system referencing those variables. Yuck.&lt;/p&gt;

&lt;p&gt;DevSafe!&lt;/p&gt;

&lt;h4 id=&#34;no-variable-shadowing:1a34a3712212748d48ae30ed3811b4a0&#34;&gt;No variable shadowing&lt;/h4&gt;

&lt;p&gt;If you want to reuse a variable name, just stick a &lt;code&gt;&#39;&lt;/code&gt; (prime, from mathematics) on it. I can&amp;rsquo;t tell you how many times I&amp;rsquo;ve been bitten by this in one way or another&amp;hellip;Javascript would suck at least 5% less if this were true.&lt;/p&gt;

&lt;p&gt;DevSafe!&lt;/p&gt;

&lt;h4 id=&#34;forced-parens-for-operator-precedence:1a34a3712212748d48ae30ed3811b4a0&#34;&gt;Forced parens for operator precedence&lt;/h4&gt;

&lt;p&gt;I know people who have issues with this with simple arithmetic (c&amp;rsquo;mon guys, &lt;strong&gt;p&lt;/strong&gt;lease &lt;strong&gt;e&lt;/strong&gt;xcuse &lt;strong&gt;m&lt;/strong&gt;y &lt;strong&gt;d&lt;/strong&gt;ear &lt;strong&gt;A&lt;/strong&gt;unt &lt;strong&gt;S&lt;/strong&gt;ally), so the idea of people remembering operator precedence for more than &lt;em&gt;40&lt;/em&gt; in Java is patently absurd. If you mix your operators in an expression, the compiler will complain if you don&amp;rsquo;t use parens.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x = 1 + 2 + 3 // OK!
var y = 1 * 2 + 3 // NOPE! Compiler error.
var z = (1 * 2) + 3 // That&#39;ll work.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DevSafe!&lt;/p&gt;

&lt;h4 id=&#34;forced-semicolons-for-same-line-expressions:1a34a3712212748d48ae30ed3811b4a0&#34;&gt;Forced semicolons for same-line expressions&lt;/h4&gt;

&lt;p&gt;Similar to the point above, the compiler obviously knows when statements have ended just as it knows the internal operator precedences. The problem is that developers are easily confused.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x = 1 let y = 2 // NOPE!
var x = 1; let y = 2 //OK!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DevSafe!&lt;/p&gt;

&lt;h4 id=&#34;all-exceptions-must-by-handled-far-fewer-crashes:1a34a3712212748d48ae30ed3811b4a0&#34;&gt;All exceptions must by handled -&amp;gt; far fewer crashes&lt;/h4&gt;

&lt;p&gt;The compiler checks that all exceptions are handled. That means if you have something built and running you know it won&amp;rsquo;t ever throw a weird runtime exception and fall over. Obviously, you can still get yourself into problems (e.g., endless loops may not crash but they can still be bad, memory leaks can still exist). Also it&amp;rsquo;s worth noting that if you call C code, you lose this guarantee (among many others).&lt;/p&gt;

&lt;p&gt;DevSafe!&lt;/p&gt;

&lt;h3 id=&#34;other-interesting-bits:1a34a3712212748d48ae30ed3811b4a0&#34;&gt;Other interesting bits&lt;/h3&gt;

&lt;h4 id=&#34;capabilities:1a34a3712212748d48ae30ed3811b4a0&#34;&gt;Capabilities&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://tutorial.ponylang.org/capabilities/index.html&#34;&gt;Capability calculus&lt;/a&gt; is really, really sweet. It is unlike anything I&amp;rsquo;ve ever seen built-in to any other language. In a nutshell, it is an annotation (explicit or implicit) that exists for every variable and parameter determining how it can be safely accessed, especially concerning itself across threads and between function calls. There are a total of 6 states and how each interacts with another or upgrades/downgrades is very clearly defined. Furthermore, &lt;strong&gt;this is all checked at compile time&lt;/strong&gt;, so you&amp;rsquo;ll know if you screwed up your data access across threads before you ever run your code! I love how clear it is to show whether a function even has the ability to mutate its arguments. It&amp;rsquo;s fascinating that you can pass opaque pointers across actors (threads) and not worry about race conditions. It is a tremendous system that a LOT of thought went into and absolutely deserves its own post. I know some folks argue that the cognitive overhead is going to be too high for this, but 1) any new programming concept has an initially high cognitive overhead, but often you get used to it (promises, I&amp;rsquo;m looking at you) 2) the compiler-time checking creates a short feedback loops to help you learn the system and ensures you&amp;rsquo;re using them properly.&lt;/p&gt;

&lt;h4 id=&#34;runtime-type-information:1a34a3712212748d48ae30ed3811b4a0&#34;&gt;Runtime Type Information&lt;/h4&gt;

&lt;p&gt;In many languages, runtime type information can be expensive or impossible to retrieve (e.g., Java has type erasure) and so it is generally avoided whenever possible. Not so in Pony! Type information is available at runtime and doing such a comparison at runtime is &amp;ldquo;generally just a pointer comparison&amp;rdquo; (their words, not mine - I haven&amp;rsquo;t tested it to look at the LLVM code). This means you can actually have &lt;code&gt;match&lt;/code&gt; statements (called &lt;code&gt;switch&lt;/code&gt; in many other languages) based on the type of the variable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fun interestingFunction(unionVar: (U32 | CustomType | None)): String =&amp;gt;
  match unionVar
  | None =&amp;gt; &amp;quot;none&amp;quot;
  | let ct : CustomType =&amp;gt; &amp;quot;CustomType&amp;quot;
  | let u : U32 =&amp;gt; &amp;quot;u32&amp;quot;
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s interesting that while this type of checking can be done, reflection is not currently supported (though you can check whether &lt;code&gt;x is None&lt;/code&gt;). I&amp;rsquo;m guessing this will change in a future release, but as of right now it&amp;rsquo;s sitting in the &lt;a href=&#34;https://github.com/ponylang/ponyc/issues/87&#34;&gt;issue backlog&lt;/a&gt;.
- Everything in the language is an expression. The result of an &lt;code&gt;if&lt;/code&gt; (and most control structures for that matter) block is the last expression within the block or &lt;code&gt;None&lt;/code&gt; if it doesn&amp;rsquo;t execute. The result of a &lt;code&gt;break&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; unless it is followed by an expression. You get the idea.&lt;/p&gt;

&lt;h4 id=&#34;destructo-read:1a34a3712212748d48ae30ed3811b4a0&#34;&gt;Destructo-Read&lt;/h4&gt;

&lt;p&gt;Pony has destructive reads. This means that you can move variables around without needing a &amp;ldquo;3rd hand&amp;rdquo; like you normally would in most other languages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x : (String | U32) = &amp;quot;foo&amp;quot;
var y : (String | U32) = 1337
y = x = &amp;quot;bar&amp;quot;
y // &amp;quot;foo&amp;quot;
x // &amp;quot;bar&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works because the value of the expression &lt;code&gt;x = &amp;quot;bar&amp;quot;&lt;/code&gt; is &lt;code&gt;x&lt;/code&gt;&amp;rsquo;s previous value, which we know to be &lt;code&gt;&amp;quot;foo&amp;quot;&lt;/code&gt;. Taking it one step further&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = y = x
x // &amp;quot;foo&amp;quot;
y // &amp;quot;bar&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Neat! It also seems like it won&amp;rsquo;t even negatively affect readability too much since only the right-most assignment can have real logic in it. Though, if people get too trigger-happy assigning variables mid-expression it may cause some comprehension problems.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x : &amp;quot;bazz&amp;quot;
if (x = &amp;quot;foo&amp;quot;) == &amp;quot;bazz&amp;quot; then
  env.out.print(&amp;quot;that&#39;s not how Java works&#39;&amp;quot;) // Yep, that prints.
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-whole-0-02:1a34a3712212748d48ae30ed3811b4a0&#34;&gt;The whole $0.02&lt;/h3&gt;

&lt;p&gt;Pony looks to be a serious contender to help &amp;ldquo;solve&amp;rdquo; concurrent programming. I probably would not recommend it to a beginning programmer right now since the tutorial and other resources are not super robust, but given the developer-friendly features and the very enthusiastic (though rather small) community I think it is absolutely worthwhile for more experienced developers to experiment with.&lt;/p&gt;

&lt;h3 id=&#34;further-information:1a34a3712212748d48ae30ed3811b4a0&#34;&gt;Further information&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Web: &lt;a href=&#34;https://www.ponylang.org/&#34;&gt;https://www.ponylang.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IRC: #ponylang @ irc.freenode.org&lt;/li&gt;
&lt;li&gt;Groups: &lt;a href=&#34;https://pony.groups.io/g/pony&#34;&gt;https://pony.groups.io/g/pony&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/ponylang&#34;&gt;https://github.com/ponylang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Password Management for the [Somewhat] Common Man</title>
      <link>http://aknowledge.xyz/blog/keepass/</link>
      <pubDate>Mon, 04 Apr 2016 16:07:17 -0700</pubDate>
      
      <guid>http://aknowledge.xyz/blog/keepass/</guid>
      <description>

&lt;h3 id=&#34;123456-password-qwerty:a63057fb289f6f92bc30abedb494f420&#34;&gt;123456, password, qwerty&lt;/h3&gt;

&lt;p&gt;In the offchance you&amp;rsquo;ve been living under a rock lacking internet access for the past several years, passwords and account information are leaked on a frighteningly regular basis. &lt;a href=&#34;https://nakedsecurity.sophos.com/2015/11/25/amazon-data-breach-rumours-spread-as-passwords-are-reset-on-some-accounts/&#34;&gt;Amazon&lt;/a&gt; forced some portion of its customers to reset their passwords around Black Friday 2015. Over 30 million &lt;a href=&#34;http://krebsonsecurity.com/2015/07/online-cheating-site-ashleymadison-hacked/&#34;&gt;Ashley Madison&lt;/a&gt; accounts&amp;rsquo; details were leaked last summer including a plethora of personal details in addition to passwords. Back in 2013, more than 130 million &lt;a href=&#34;http://www.troyhunt.com/2013/11/adobe-credentials-and-serious.html&#34;&gt;Adobe&lt;/a&gt; user names, emails, encrypted (but &lt;a href=&#34;https://crackstation.net/hashing-security.htm&#34;&gt;unsalted&lt;/a&gt;) passwords, and clear-text password hints (&lt;strong&gt;do not &lt;em&gt;ever&lt;/em&gt; use password hints&lt;/strong&gt;) were loosed upon the internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Side note&lt;/strong&gt;: While I am sorry for the damage caused by the Adobe leak, one silver lining is that someone created a series of very clever crossword puzzles based on the password hints &lt;a href=&#34;http://zed0.co.uk/crossword/&#34;&gt;here&lt;/a&gt;. I got 100% on the first puzzle!&lt;/p&gt;

&lt;p&gt;While there are services such as &lt;a href=&#34;https://haveibeenpwned.com/&#34;&gt;HaveIBeenPwned&lt;/a&gt; or &lt;a href=&#34;https://breachalarm.com/&#34;&gt;BreachAlarm&lt;/a&gt; which let you know when accounts related to your email address have been publicly compromised, their importance is drastically reduced as long as you take some necessary precautions. Furthermore, the idea of submitting your email address to a third party service is &lt;a href=&#34;http://mashable.com/2014/09/12/should-you-trust-gmail-password/&#34;&gt;questionable&lt;/a&gt;. For example, the site owner could log your email address against your IP, service provider, and user-agent to be used in a later exploit. &lt;em&gt;If there is a leak, you are always better off just changing your password anyway&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;the-rise-of-the-password-managers:a63057fb289f6f92bc30abedb494f420&#34;&gt;The Rise of the Password Managers&lt;/h3&gt;

&lt;p&gt;Now there are a lot of things we can do to help protect ourselves from these disasters, but one simple idea is to use a different strong password for every account you have. This is not a new idea, but most people I know do not take measures because they are a &lt;em&gt;pain in the ass&lt;/em&gt;. How many long sequences of characters can you remember? What about random sequences of characters? Of my friends and family, most have around 5 passwords they memorize with varying levels of security and generally remain unchanged until they are forced to do so. Many use the same password for all related services (&amp;ldquo;well it&amp;rsquo;s easier to remember which password to use if all of my banking passwords are the same!&amp;rdquo;). This really, really doesn&amp;rsquo;t fly.&lt;/p&gt;

&lt;p&gt;In response to these leaks, more and more people are now thankfully using password managers such as &lt;a href=&#34;https://www.dashlane.com&#34;&gt;Dashlane&lt;/a&gt;, &lt;a href=&#34;https://laspass.com&#34;&gt;LastPass&lt;/a&gt;, and &lt;a href=&#34;https://1password.com/&#34;&gt;1Password&lt;/a&gt; with a variety of different features (&lt;a href=&#34;http://www.pcmag.com/article2/0,2817,2407168,00.asp&#34;&gt;feature comparison here&lt;/a&gt;). Most of these are paid or subscription based products, but many also come with a free tier with differing levels of hobbling. This is all well and good, but I figured there &lt;em&gt;must&lt;/em&gt; be some sort of open-source system that I could use that would provide me with the most crucial features:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;strongly encrypted&lt;/li&gt;
&lt;li&gt;cross platform (OSX, Windows, Linux, Android, iOS, browsers)&lt;/li&gt;
&lt;li&gt;easily distributable&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It turns out I was right, and it&amp;rsquo;s called &lt;a href=&#34;http://keepass.info/&#34;&gt;KeePass&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;kicking-pass-with-open-source-software:a63057fb289f6f92bc30abedb494f420&#34;&gt;Kicking Pass with Open Source Software&lt;/h3&gt;

&lt;p&gt;KeePass is based on a very simple idea: take a database with your passwords and metadata in it, encrypt the whole thing in AES (or other cipher with plugins), and store it on your filesystem. You can even specify the number of encryption rounds to make it harder to crack! This gets us 2 out of 3 of our critical features while adding a few others. Importing and exporting are both supported with a variety of formats so there is no worry about lock-in: there isn&amp;rsquo;t a company to be worried about losing customers here! Each password can have a history of customizable length. Furthermore as long as there are still applications that support the .kdbx (or the legacy .kdb) standard you will have a password manager.  While the reference implementation is for Windows, since it is open source there are also a number of ports for other platforms.&lt;/p&gt;

&lt;p&gt;The last missing piece here is distribution. Frankly, this is actually a lot better that it&amp;rsquo;s not a part of the KeePass project - file synchronization is a tricky enough problem as it is and I&amp;rsquo;d rather be able to swap out the implementations as I want. Luckily for us, there are a variety of cross-platform file distribution services to choose from. Many of the KeePass clients integrate well with &lt;a href=&#34;https://www.dropbox.com/&#34;&gt;Dropbox&lt;/a&gt;, but &lt;a href=&#34;https://onedrive.live.com/&#34;&gt;OneDrive&lt;/a&gt;, &lt;a href=&#34;https://drive.google.com&#34;&gt;Google Drive&lt;/a&gt;, &lt;a href=&#34;https://tresorit.com&#34;&gt;Tresorit&lt;/a&gt;, or any others work almost as well.&lt;/p&gt;

&lt;h3 id=&#34;my-setup:a63057fb289f6f92bc30abedb494f420&#34;&gt;My Setup&lt;/h3&gt;

&lt;p&gt;As of the time of this post, my database uses 8340000 encryption rounds which is high enough to delay any simple brute-force attacks and low enough to not drastically degrade the user experience on my phone. You can be sure that whenever I upgrade my phone I will be increasing this number.
My default generated password is 20 characters including mixed-case alphanumerics and symbols. Whenever KeePass generates a password that includes unsupported symbols for a particular site/application (e.g., &lt;code&gt;{, }, &amp;lt;, &amp;gt;, ~, \&lt;/code&gt;), I manually replace the problematic characters with randomly chosen supported ones.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;File synchronization: I went with &lt;a href=&#34;https://tresorit.com&#34;&gt;Tresorit&lt;/a&gt; because it offers end-to-end encryption and file storage in Switzerland for the low, low price of free. Unfortunately their free plan only allows 3 devices to sync files and I&amp;rsquo;ve experienced some finnicky-ness in getting my files on Android to upload. This will probably be resolved in future releases though so I&amp;rsquo;m willing to stomach it for the time being (especially since my password database doesn&amp;rsquo;t change &lt;em&gt;that&lt;/em&gt; often).&lt;/li&gt;
&lt;li&gt;Android: &lt;a href=&#34;https://keepass2android.codeplex.com/&#34;&gt;Keepass2Android&lt;/a&gt; is open source, comes with its own keyboard to enter in your credentials into forms for you (so you&amp;rsquo;re not vulnerable to clipboard-sniffing attacks), and supports fingerprint unlocking. It seems to have specific support for Dropbox, Google Drive, OneDrive, but it doesn&amp;rsquo;t have a problem retrieving files from Tresorit either. It may have direct uploading support with the other storage services, but I haven&amp;rsquo;t tried.&lt;/li&gt;
&lt;li&gt;OSX/Linux: I could have run the reference client under &lt;a href=&#34;www.mono-project.com/Mono:OSX/&#34;&gt;Mono&lt;/a&gt;, but &lt;a href=&#34;https://www.keepassx.org/&#34;&gt;KeePassX&lt;/a&gt; has a nice interface, is actively maintained, and is cross platform.
been &lt;em&gt;too&lt;/em&gt; irritated by manually uploading my updated database.&lt;/li&gt;
&lt;li&gt;Windows: The &lt;a href=&#34;http://keepass.info/&#34;&gt;KeePass&lt;/a&gt; reference client seems to work well enough for me but I don&amp;rsquo;t use my Windows machine enough to investigate if there are better options for me. If that ever changes, I&amp;rsquo;ll probably check out KeePassX.&lt;/li&gt;
&lt;li&gt;Chrome: I&amp;rsquo;m using &lt;a href=&#34;https://chrome.google.com/webstore/detail/ompiailgknfdndiefoaoiligalphfdae&#34;&gt;ChromeIPass&lt;/a&gt;, but it requires a running &lt;a href=&#34;https://github.com/pfn/keepasshttp/&#34;&gt;KeePassHttp&lt;/a&gt; instance (essentially, a webserver attached to an instance of KeePass that can securely send password data, also open source). At the moment, KeePassHttp is only supported by the original KeePass but has been &lt;a href=&#34;https://github.com/keepassx/keepassx/pull/111&#34;&gt;unofficially ported to KeePassX&lt;/a&gt; and available on OSX via the author&amp;rsquo;s personal homebrew-pfa (&lt;code&gt;brew install eugenesan/homebrew-pfa/keepassx&lt;/code&gt;). The big issue here is that we are now relying on the author to keep his branch up-to-date. =/
Otherwise, there is &lt;a href=&#34;https://chrome.google.com/webstore/detail/ckp-keepass-integration-f/lnfepbjehgokldcaljagbmchhnaaogpc&#34;&gt;CKP&lt;/a&gt;, which is read-only and doesn&amp;rsquo;t automatically refetch your passwords from the local filesystem (though supposedly it can refetch if it&amp;rsquo;s set up with Dropbox).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ll also give a shoutout to &lt;a href=&#34;https://keeweb.info/&#34;&gt;KeeWeb&lt;/a&gt; which is a promising looking cross-platform application built on &lt;a href=&#34;http://electron.atom.io/&#34;&gt;Electron&lt;/a&gt;. It doesn&amp;rsquo;t quite have feature parity with my current setup yet (though KeePassHttp is on the roadmap!), but I&amp;rsquo;m certainly very interested to see its progress over the next few months.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t use iOS or Firefox these days but if that ever changes or I receive strong recommendations from anyone I will update this post. There are also ports listed on the &lt;a href=&#34;http://keepass.info/download.html&#34;&gt;KeePass website&lt;/a&gt; for many more platforms, including Windows Phone, BlackBerry (!), PocketPC(!!), and PalmOS(!!!).&lt;/p&gt;

&lt;h3 id=&#34;you-young-ns-and-your-internets:a63057fb289f6f92bc30abedb494f420&#34;&gt;You young&amp;rsquo;ns and your internets&amp;hellip;&lt;/h3&gt;

&lt;p&gt;Many of my relatives use good-old-fashioned pen &amp;amp; paper to store their passwords. While this means the passwords are probably safe from most hackers and I&amp;rsquo;m not particularly worried about theft, this is a much larger risk if and when they move from one dwelling to the next and items get lost in the shuffle. As you might have guessed by the title of this post, I am confident that even the most non-technologically savvy members of my family can stomach KeePass and even without the complications of synchronizing the database across devices, it is much better than a piece of paper. If there is no cloud synchronization in your system though, I would strongly recommend some sort of file backup, even if it&amp;rsquo;s just OSX&amp;rsquo;s built-in Time Machine (though again, please encrypt this!).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://aknowledge.xyz/about/</link>
      <pubDate>Fri, 25 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://aknowledge.xyz/about/</guid>
      <description>&lt;p&gt;Aaron was born and raised in the birthplace of grunge, Seattle, Washington. He earned both his B.A. in Computer Science and B.M. in Classical Performance (Bass) from Oberlin College &amp;amp; Conservatory before moving to the San Francisco bay to pursue a career in technology.&lt;/p&gt;

&lt;p&gt;He has a passion for tools and efficiency, helping himself and others to emphasize brain-work over grunt-work. You can find him at a prodigous amount of concerts and shows throughout the bay.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>